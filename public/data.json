[
    {
        "classify": "dbLayer",
        "title": "DB层",
        "templates": [
            {
                "code": "create_table_sql",
                "title": "建表SQL",
                "selectIon": true,
                "bodyCode": "CREATE TABLE `$table_name$` (\n  $create_table_field_list$\n  PRIMARY KEY (`$primary_key$`)\n) ENGINE=$db_engine$ DEFAULT CHARSET=$db_encoded$;",
                "memberCode": [],
                "generateCode": "CREATE TABLE `revenue_record` (\n  `id` INT(11) NOT NULL AUTO_INCREMENT,\n  `gmt_create` DATETIME DEFAULT 'CURRENT_TIMESTAMP',\n  `gmt_modify` DATETIME DEFAULT NULL,\n  `code` VARCHAR(30) DEFAULT NULL COMMENT '收入类型码',\n  `amount` DECIMAL(10,2) DEFAULT NULL COMMENT '收入金额',\n  `revenue_date` DATETIME DEFAULT NULL COMMENT '收入日期',\n  `shop_id` INT(11) DEFAULT NULL,\n  `describe` VARCHAR(300) DEFAULT NULL COMMENT '备注'\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=CHARSET=utf8;"
            },
            {
                "code": "crud_sql_mapperxml",
                "title": "CRUD SQL(Mapper.xml)",
                "selectIon": true,
                "bodyCode": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- $table_name_hump_A$Mapper.xml -->\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.xxx.$table_name_hump_A$DAO\">\n\n    <!--  插入数据  -->\n    <insert id=\"insert\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        INSERT INTO $table_name$($insert_field_name_list$)\n        VALUES ($insert_field_value_list$);\n    </insert>\n\n    <!--  修改数据  -->\n    <update id=\"update\">\n        UPDATE $table_name$ SET\n            $update_field_list$\n        WHERE $primary_key$ = #{$primary_key_hump$};\n    </update>\n\n    <!--  分页查询数据  -->\n    <select id=\"pageQuery\" resultType=\"com.xxx.$table_name_hump_A$\">\n        SELECT $select_field_list$ FROM $table_name$\n        WHERE 1=1\n        $where_field_list$\n\n        ORDER BY $primary_key$ DESC\n\n        <if test=\"pageIndex != null and pageSize != null\">\n            LIMIT #{offset},#{rows}\n        </if>\n    </select>\n\n    <!--  数据count  -->\n    <select id=\"pageQueryCount\" resultType=\"java.lang.Long\">\n        SELECT COUNT(1) as total FROM $table_name$\n        WHERE 1=1\n        $where_field_list$\n    </select>\n\n    <!--  根据ID查询数据  -->\n    <select id=\"queryById\" resultType=\"com.xxx.$table_name_hump_A$\">\n        SELECT $select_field_list$ FROM $table_name$\n        WHERE $primary_key$ = #{$primary_key_hump$};\n    </select>\n\n    <!--  根据ID查询数据（带锁）  -->\n    <select id=\"queryByIdLock\" resultType=\"com.xxx.$table_name_hump_A$\">\n        SELECT $select_field_list$ FROM $table_name$\n        WHERE $primary_key$ = #{$primary_key_hump$} FOR UPDATE;\n    </select>\n\n</mapper>",
                "generateCode": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- RevenueRecordMapper.xml -->\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.xxx.RevenueRecordDAO\">\n\n    <!--  插入数据  -->\n    <insert id=\"insert\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        INSERT INTO revenue_record(gmt_create, gmt_modify, code, amount, revenue_date, shop_id, describe)\n        VALUES (#{gmtCreate}, #{gmtModify}, #{code}, #{amount}, #{revenueDate}, #{shopId}, #{describe});\n    </insert>\n\n    <!--  修改数据  -->\n    <update id=\"update\">\n        UPDATE revenue_record SET\n            gmt_create = #{gmtCreate},\n            gmt_modify = #{gmtModify},\n            code = #{code},\n            amount = #{amount},\n            revenue_date = #{revenueDate},\n            shop_id = #{shopId},\n            describe = #{describe}\n        WHERE id = #{id};\n    </update>\n\n    <!--  分页查询数据  -->\n    <select id=\"pageQuery\" resultType=\"com.xxx.RevenueRecordDO\">\n        SELECT id, gmt_create, gmt_modify, code, amount, revenue_date, shop_id, describe FROM revenue_record\n        WHERE 1=1\n        <if test=\"id != null\">\n            AND id = #{id}\n        </if>\n        <if test=\"gmtCreate != null\">\n            AND gmt_create = #{gmtCreate}\n        </if>\n        <if test=\"gmtModify != null\">\n            AND gmt_modify = #{gmtModify}\n        </if>\n        <if test=\"code != null\">\n            AND code = #{code}\n        </if>\n        <if test=\"amount != null\">\n            AND amount = #{amount}\n        </if>\n        <if test=\"revenueDate != null\">\n            AND revenue_date = #{revenueDate}\n        </if>\n        <if test=\"shopId != null\">\n            AND shop_id = #{shopId}\n        </if>\n        <if test=\"describe != null\">\n            AND describe = #{describe}\n        </if>\n\n        ORDER BY id DESC\n\n        <if test=\"pageIndex != null and pageSize != null\">\n            LIMIT #{offset},#{rows}\n        </if>\n    </select>\n\n    <!--  数据count  -->\n    <select id=\"pageQueryCount\" resultType=\"java.lang.Long\">\n        SELECT COUNT(1) as total FROM revenue_record\n        WHERE 1=1\n        <if test=\"id != null\">\n            AND id = #{id}\n        </if>\n        <if test=\"gmtCreate != null\">\n            AND gmt_create = #{gmtCreate}\n        </if>\n        <if test=\"gmtModify != null\">\n            AND gmt_modify = #{gmtModify}\n        </if>\n        <if test=\"code != null\">\n            AND code = #{code}\n        </if>\n        <if test=\"amount != null\">\n            AND amount = #{amount}\n        </if>\n        <if test=\"revenueDate != null\">\n            AND revenue_date = #{revenueDate}\n        </if>\n        <if test=\"shopId != null\">\n            AND shop_id = #{shopId}\n        </if>\n        <if test=\"describe != null\">\n            AND describe = #{describe}\n        </if>\n    </select>\n\n    <!--  根据ID查询数据  -->\n    <select id=\"queryById\" resultType=\"com.xxx.RevenueRecordDO\">\n        SELECT id, gmt_create, gmt_modify, code, amount, revenue_date, shop_id, describe FROM revenue_record\n        WHERE id = #{id};\n    </select>\n\n    <!--  根据ID查询数据（带锁）  -->\n    <select id=\"queryByIdLock\" resultType=\"com.xxx.RevenueRecordDO\">\n        SELECT id, gmt_create, gmt_modify, code, amount, revenue_date, shop_id, describe FROM revenue_record\n        WHERE id = #{id} FOR UPDATE;\n    </select>\n\n</mapper>"
            },
            {
                "code": "db_model",
                "title": "DO实体类",
                "selectIon": true,
                "bodyCode": "\nimport java.util.Date;\n\n/**\n * $table_desc$DO模型\n * Created by 创建人 on $current_time$.\n */\n@Data\npublic class $table_name_hump_A$ {\n    $member_param_list$\n   }\n",
                "memberCode": [
                    {
                        "code": "member_param_list",
                        "title": "成员变量列表",
                        "bodyCode": "    /** $field_comment$ */\n    private $field_type_java$ $field_name_hump$;"
                    },
                    {
                        "code": "get_set_method_list",
                        "title": "GetSet方法列表",
                        "bodyCode": "\n    public $field_type_java$ get$field_name_hump_A$() {\n        return $field_name_hump$;\n    }\n    \n    public void set$field_name_hump_A$($field_type_java$ $field_name_hump$) {\n        this.$field_name_hump$ = $field_name_hump$;\n    }"
                    }
                ],
                "generateCode": "\nimport java.util.Date;\n\n/**\n * 收入信息DTO模型\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class RevenueRecordDO {\n    /** id */\n    private Integer id;\n    /** gmtCreate */\n    private Date gmtCreate;\n    /** gmtModify */\n    private Date gmtModify;\n    /** 收入类型码 */\n    private String code;\n    /** 收入金额 */\n    private String amount;\n    /** 收入日期 */\n    private Date revenueDate;\n    /** shopId */\n    private Integer shopId;\n    /** 备注 */\n    private String describe;\n\n    public Integer getId() {\n        return id;\n    }\n    \n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Date getGmtCreate() {\n        return gmtCreate;\n    }\n    \n    public void setGmtCreate(Date gmtCreate) {\n        this.gmtCreate = gmtCreate;\n    }\n\n    public Date getGmtModify() {\n        return gmtModify;\n    }\n    \n    public void setGmtModify(Date gmtModify) {\n        this.gmtModify = gmtModify;\n    }\n\n    public String getCode() {\n        return code;\n    }\n    \n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public String getAmount() {\n        return amount;\n    }\n    \n    public void setAmount(String amount) {\n        this.amount = amount;\n    }\n\n    public Date getRevenueDate() {\n        return revenueDate;\n    }\n    \n    public void setRevenueDate(Date revenueDate) {\n        this.revenueDate = revenueDate;\n    }\n\n    public Integer getShopId() {\n        return shopId;\n    }\n    \n    public void setShopId(Integer shopId) {\n        this.shopId = shopId;\n    }\n\n    public String getDescribe() {\n        return describe;\n    }\n    \n    public void setDescribe(String describe) {\n        this.describe = describe;\n    }\n}\n"
            },
            {
                "code": "db_service",
                "title": "DAO接口类",
                "selectIon": true,
                "bodyCode": "\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * $table_desc$DB接口\n * Created by 创建人 on $current_time$\n */\n@Mapper\npublic interface $table_name_hump_A$DAO {\n\n    /**\n     * 添加\n     * @param data\n     * return 影响行数\n     */\n    int insert($table_name_hump_A$ data);\n\n    /**\n     * 修改\n     * @param data\n     * return 影响行数\n     */\n    int update($table_name_hump_A$ data);\n\n    /**\n     * 分页查询\n     * @param param\n     * return 结果列表\n     */\n    List<$table_name_hump_A$> pageQuery(Map param);\n\n    /**\n     * 查询count\n     * @param param\n     * return count条数\n     */\n    Long pageQueryCount(Map param);\n\n    /**\n     * 根据ID查询\n     * @param id\n     * return 结果DO对象\n     */\n    $table_name_hump_A$ queryById(@Param(\"$primary_key_hump$\") $primary_key_type_java$ $primary_key_hump$);\n\n    /**\n     * 根据ID查询（带锁）\n     * @param id\n     * return 结果DO对象\n     */\n    $table_name_hump_A$ queryByIdLock(@Param(\"$primary_key_hump$\") $primary_key_type_java$ $primary_key_hump$);\n}\n",
                "generateCode": "\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 收入信息DB接口\n * Created by 创建人 on 2023-02-14 11:40:57\n */\n@Mapper\npublic interface RevenueRecordDAO {\n\n    /**\n     * 添加\n     * @param data\n     * return 影响行数\n     */\n    int insert(RevenueRecordDO data);\n\n    /**\n     * 修改\n     * @param data\n     * return 影响行数\n     */\n    int update(RevenueRecordDO data);\n\n    /**\n     * 分页查询\n     * @param param\n     * return 结果列表\n     */\n    List<RevenueRecordDO> pageQuery(Map param);\n\n    /**\n     * 查询count\n     * @param param\n     * return count条数\n     */\n    Long pageQueryCount(Map param);\n\n    /**\n     * 根据ID查询\n     * @param id\n     * return 结果DO对象\n     */\n    RevenueRecordDO queryById(@Param(\"id\") Integer id);\n\n    /**\n     * 根据ID查询（带锁）\n     * @param id\n     * return 结果DO对象\n     */\n    RevenueRecordDO queryByIdLock(@Param(\"id\") Integer id);\n}\n"
            }
        ]
    },
    {
        "classify": "bizLayer",
        "title": "业务层",
        "templates": [
            {
                "code": "dto_model",
                "title": "DTO实体类",
                "selectIon": false,
                "bodyCode": "\nimport java.util.Date;\n\n/**\n * $table_desc$DTO模型\n * Created by 创建人 on $current_time$.\n */\n@Data\npublic class $table_name_hump_A$DTO {\n    $member_param_list$\n }\n",
                "memberCode": [
                    {
                        "code": "member_param_list",
                        "title": "成员变量列表",
                        "bodyCode": "    /** $field_comment$ */\n    private $field_type_java$ $field_name_hump$;"
                    },
                    {
                        "code": "get_set_method_list",
                        "title": "GetSet方法列表",
                        "bodyCode": "\n    public $field_type_java$ get$field_name_hump_A$() {\n        return $field_name_hump$;\n    }\n    \n    public void set$field_name_hump_A$($field_type_java$ $field_name_hump$) {\n        this.$field_name_hump$ = $field_name_hump$;\n    }"
                    }
                ],
                "generateCode": "\nimport java.util.Date;\n\n/**\n * 收入信息DTO模型\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class RevenueRecordDTO extends ToString{\n    /** id */\n    private Integer id;\n    /** gmtCreate */\n    private Date gmtCreate;\n    /** gmtModify */\n    private Date gmtModify;\n    /** 收入类型码 */\n    private String code;\n    /** 收入金额 */\n    private String amount;\n    /** 收入日期 */\n    private Date revenueDate;\n    /** shopId */\n    private Integer shopId;\n    /** 备注 */\n    private String describe;\n\n    public Integer getId() {\n        return id;\n    }\n    \n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Date getGmtCreate() {\n        return gmtCreate;\n    }\n    \n    public void setGmtCreate(Date gmtCreate) {\n        this.gmtCreate = gmtCreate;\n    }\n\n    public Date getGmtModify() {\n        return gmtModify;\n    }\n    \n    public void setGmtModify(Date gmtModify) {\n        this.gmtModify = gmtModify;\n    }\n\n    public String getCode() {\n        return code;\n    }\n    \n    public void setCode(String code) {\n        this.code = code;\n    }\n\n    public String getAmount() {\n        return amount;\n    }\n    \n    public void setAmount(String amount) {\n        this.amount = amount;\n    }\n\n    public Date getRevenueDate() {\n        return revenueDate;\n    }\n    \n    public void setRevenueDate(Date revenueDate) {\n        this.revenueDate = revenueDate;\n    }\n\n    public Integer getShopId() {\n        return shopId;\n    }\n    \n    public void setShopId(Integer shopId) {\n        this.shopId = shopId;\n    }\n\n    public String getDescribe() {\n        return describe;\n    }\n    \n    public void setDescribe(String describe) {\n        this.describe = describe;\n    }\n}\n"
            },
            {
                "code": "biz_service",
                "title": "业务接口类",
                "selectIon": true,
                "bodyCode": "\n/**\n * $table_desc$业务接口\n * Created by 创建人 on $current_time$\n */\npublic interface $table_name_hump_A$Service {\n\n    /**\n     * 添加$table_desc$\n     * @param $table_name_hump$ $table_desc$\n     */\n    Integer create($table_name_hump_A$ $table_name_hump$);\n\n    /**\n     * 修改$table_desc$\n     * @param $table_name_hump$ $table_desc$\n     */\n    Void modify($table_name_hump_A$ $table_name_hump$);\n\n    /**\n     * 分页查询\n     * @param pageIndex 页标\n     * @param pageSize 分页数\n     * return 结果与分页信息\n     */\n    Page<$table_name_hump_A$> pageQuery(Integer pageIndex, Integer pageSize);\n\n    /**\n     * 根据ID查询\n     * @param id 主键id\n     * return 结果DO对象\n     */\n    $table_name_hump_A$ queryById(Integer id);\n\n}\n",
                "generateCode": "\n/**\n * 收入信息业务接口\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic interface RevenueRecordService {\n\n    /**\n     * 添加\n     * @param request = {all in params by RevenueRecordDTO, ...}\n     * return true or false\n     */\n    CommonResult create(JSONObject request);\n\n    /**\n     * 修改\n     * @param request = {all in params by RevenueRecordDTO, ...}\n     * return true or false\n     */\n    CommonResult modify(JSONObject request);\n\n    /**\n     * 分页查询\n     * @param request = {all in params by Pagination, all in params by RevenueRecordDTO, ...}\n     * return 结果与分页信息\n     */\n    CommonResult pageQuery(JSONObject request);\n\n    /**\n     * 根据ID查询\n     * @param request = {id: $id, ...}\n     * return 结果DO对象\n     */\n    CommonResult queryById(JSONObject request);\n\n}\n"
            },
            {
                "code": "biz_service_impl",
                "title": "业务接口实现类",
                "selectIon": true,
                "bodyCode": "\nimport org.springframework.stereotype.Service;\n\n/**\n * $table_desc$业务实现\n * Created by 创建人 on $current_time$\n */\n@Service\n@RequiredArgsConstructor\npublic class $table_name_hump_A$ServiceImpl implements $table_name_hump_A$Service {\n\n    private final $table_name_hump_A$DAO $table_name_hump$DAO;\n\n    @Override\n    public Integer create($table_name_hump_A$ $table_name_hump$) {\n        \n        // 落库\n        int count = $table_name_hump$DAO.insert($table_name_hump$);\n        //通过count判断是否创建成功\n\n        // 返回创建成功的ID数据\n        return $table_name_hump$.get$primary_key_hump_A$();\n    }\n\n    @Override\n    public Void modify($table_name_hump_A$ $table_name_hump$) {\n        \n        // 落库\n        int count = $table_name_hump$DAO.update(dataDo);\n        //判断是否更新成功\n\n        // 返回修改成功的ID数据\n    }\n\n    @Override\n    public Page<$table_name_hump_A$> pageQuery(Integer pageIndex, Integer pageSize) {\n        \n        // 取分页列表数据\n        PageHelper.startPage(pageIndex, pageSize);\n        List<$table_name_hump_A$> dbResult = $table_name_hump$DAO.pageQuery();\n\n        // 取数据\n        PageInfo<$table_name_hump_A$> pageInfo = new PageInfo<>(dbResult);\n\n        return PageUtil.transform(pageInfo);\n    }\n\n    @Override\n    public CommonResult queryById(Integer id) {\n        \n        // 根据ID获取数据\n        $table_name_hump_A$ dbResult = $table_name_hump$DAO.queryById($primary_key_hump$);\n        return dbResult;\n    }\n}\n",
                "memberCode": [
                    {
                        "code": "biz_check_required_params",
                        "title": "必填项业务校验",
                        "bodyCode": "        CommonAssert.$java_type_adapter_assert_method$(dto.get$field_name_hump_A$(), \"$field_comment$不可空\");"
                    }
                ],
                "generateCode": "\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n/**\n * 收入信息业务实现\n * Created by 创建人 on 2023-02-14 11:40:57\n */\n@Service\npublic class RevenueRecordServiceImpl implements RevenueRecordService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RevenueRecordServiceImpl.class);\n\n    @Resource\n    private RevenueRecordDAO revenueRecordDAO;\n\n    @Override\n    public CommonResult create(JSONObject request) {\n        \n        // 入参转成对应类型\n        CommonAssert.isNoEmptyObj(request, \"请求参数不可空\");\n        RevenueRecordDTO dto = JSON.toJavaObject(request, RevenueRecordDTO.class);\n\t\t\n        // 参数校验\n\n        \n        // 转成do模型\n        RevenueRecordDO dataDo = RevenueRecordConverter.toDo(dto);\n\n        // 落库\n        int count = revenueRecordDAO.insert(dataDo);\n        CommonAssert.isTrue(count > 0, \"创建失败，请重试\");\n\n        // 返回创建成功的ID数据\n        return new CommonResult(dataDo.getId());\n    }\n\n    @Override\n    public CommonResult modify(JSONObject request) {\n        \n        // 入参转成对应类型\n        CommonAssert.isNoEmptyObj(request, \"请求参数不可空\");\n        RevenueRecordDTO dto = JSON.toJavaObject(request, RevenueRecordDTO.class);\n\t\t\n        // 参数校验\n\n        \n        // 转成do模型\n        RevenueRecordDO dataDo = RevenueRecordConverter.toDo(dto);\n\n        // 落库\n        int count = revenueRecordDAO.update(dataDo);\n        CommonAssert.greaterThanZero(count, \"修改失败，请重试\");\n\n        // 返回修改成功的ID数据\n        return new CommonResult(dataDo.getId());\n    }\n\n    @Override\n    public CommonResult pageQuery(JSONObject request) {\n        \n        // 入参基本校验\n        CommonAssert.isNoEmptyObj(request, \"请求参数不可空\");\n        \n        // 分页信息校验\n        PaginationDO pagination = PaginationDO.setRequestOffsetAndRows(request);\n        CommonAssert.isNoEmptyObj(pagination, \"分页参数 $pageIndex、$pageSize 不可空\");\n        CommonAssert.isTrue(pagination.getPageSize() <= 100, \"单次查询条数不可超过100条\");\n\n        // 取分页列表数据\n        List<RevenueRecordDO> dbResult = revenueRecordDAO.pageQuery(request);\n\n        // 取count数据\n        long count = revenueRecordDAO.pageQueryCount(request);\n\n        // 空返回\n        if (CollectionUtils.isEmpty(dbResult)){\n            return new CommonResult(new PaginationResult(null, request, count));\n        }\n\n        // 模型转换\n        List<RevenueRecordDTO> list = RevenueRecordConverter.toDtoList(dbResult);\n\n        // 返回分页结果\n        return new CommonResult(new PaginationResult(list, request, count));\n    }\n\n    @Override\n    public CommonResult queryById(JSONObject request) {\n        \n        // 取入参\n        CommonAssert.isNoEmptyObj(request, \"请求参数不可空\");\n\n        // 根据ID获取数据\n        Integer id = request.getInteger(\"id\");\n        CommonAssert.isNoEmptyObj(id, \"参数错误，无法执行查询\");\n        RevenueRecordDO dbResult = revenueRecordDAO.queryById(id);\n        \n        // 未查询到结果，返回\n        if (null == dbResult){\n            return new CommonResult();\n        }\n\n        // 模型转换\n        RevenueRecordDTO result = RevenueRecordConverter.toDto(dbResult);\n\n        // 返回结果对象\n        return new CommonResult(result);\n    }\n}\n"
            },
            {
                "code": "dto_to_do_convercer",
                "title": "DTO与DO模型转换类",
                "selectIon": false,
                "bodyCode": "\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * $table_desc$模型转换器\n * Created by 创建人 on $current_time$\n */\npublic class $table_name_hump_A$Converter {\n\n    /**\n     * dto转do\n     * @param source\n     * return do模型\n     */\n    public static $table_name_hump_A$ toDo($table_name_hump_A$DTO source){\n        $table_name_hump_A$ target = new $table_name_hump_A$();\n        $converter_source_to_target_params_list$\n        return target;\n    }\n\n    /**\n     * do转dto\n     * @param source\n     * return dto模型\n     */\n    public static $table_name_hump_A$DTO toDto($table_name_hump_A$ source){\n        $table_name_hump_A$DTO target = new $table_name_hump_A$DTO();\n        $converter_source_to_target_params_list$\n        return target;\n    }\n\n    /**\n     * do list 转 dto\n     * @param data\n     * return list dto模型\n     */\n    public static List<$table_name_hump_A$DTO> toDtoList(List<$table_name_hump_A$> data){\n        if (CollectionUtils.isEmpty(data)){\n            return null;\n        }\n        List<$table_name_hump_A$DTO> list = new ArrayList<>();\n        for ($table_name_hump_A$ item : data){\n            list.add($table_name_hump_A$Converter.toDto(item));\n        }\n        return list;\n    }\n}\n",
                "memberCode": [
                    {
                        "code": "converter_source_to_target_params_list",
                        "title": "模型转换器参数列表",
                        "bodyCode": "        target.set$field_name_hump_A$(source.get$field_name_hump_A$());"
                    }
                ],
                "generateCode": "\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 收入信息模型转换器\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic class RevenueRecordConverter {\n\n    /**\n     * dto转do\n     * @param source\n     * return do模型\n     */\n    public static RevenueRecordDO toDo(RevenueRecordDTO source){\n        RevenueRecordDO target = new RevenueRecordDO();\n        target.setId(source.getId());\n        target.setGmtCreate(source.getGmtCreate());\n        target.setGmtModify(source.getGmtModify());\n        target.setCode(source.getCode());\n        target.setAmount(source.getAmount());\n        target.setRevenueDate(source.getRevenueDate());\n        target.setShopId(source.getShopId());\n        target.setDescribe(source.getDescribe());\n        return target;\n    }\n\n    /**\n     * do转dto\n     * @param source\n     * return dto模型\n     */\n    public static RevenueRecordDTO toDto(RevenueRecordDO source){\n        RevenueRecordDTO target = new RevenueRecordDTO();\n        target.setId(source.getId());\n        target.setGmtCreate(source.getGmtCreate());\n        target.setGmtModify(source.getGmtModify());\n        target.setCode(source.getCode());\n        target.setAmount(source.getAmount());\n        target.setRevenueDate(source.getRevenueDate());\n        target.setShopId(source.getShopId());\n        target.setDescribe(source.getDescribe());\n        return target;\n    }\n\n    /**\n     * do list 转 dto\n     * @param data\n     * return list dto模型\n     */\n    public static List<RevenueRecordDTO> toDtoList(List<RevenueRecordDO> data){\n        if (CollectionUtils.isEmpty(data)){\n            return null;\n        }\n        List<RevenueRecordDTO> list = new ArrayList<>();\n        for (RevenueRecordDO item : data){\n            list.add(RevenueRecordConverter.toDto(item));\n        }\n        return list;\n    }\n}\n"
            }
        ]
    },
    {
        "classify": "controllerLayer",
        "title": "controller层",
        "templates": [
            {
                "code": "controller_class",
                "title": "Controller类",
                "selectIon": true,
                "bodyCode": "\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $table_desc$HTTP请求控制器\n * Created by 创建人 on $current_time$.\n */\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(value = \"/$table_name_hump$\")\npublic class $table_name_hump_A$Controller {\n\n    private final $table_name_hump_A$Service $table_name_hump$Service;\n\n    @PostMapping\n    @ApiOperation(\"新增$table_desc$\")\n    public HttpResult<Integer> create(@RequestBody $table_name_hump_A$ $table_name_hump$){\n        return HttpResult.success($table_name_hump$Service.create($table_name_hump$));\n    }\n\n    @PutMapping\n    @ApiOperation(\"更新$table_desc$\")\n    public HttpResult<Void> modify(@RequestBody $table_name_hump_A$ $table_name_hump$){\n        return $table_name_hump$Service.modify($table_name_hump$);\n    }\n\n    @GetMapping\n    @ApiOperation(\"分页查询$table_desc$\")\n    public HttpResult<Page<$table_name_hump_A$>> pageQuery(\n            @ApiParam(value = \"页标\") @RequestParam(required = false, defaultValue = \"1\") Integer pageIndex,\n            @ApiParam(value = \"分页数\") @RequestParam(required = false, defaultValue = \"10\") Integer pageSize)\n    {\n        return $table_name_hump$Service.pageQuery(pageIndex, pageSize);\n    }\n\n    @GetMapping(\"\/{id}\")\n    @ApiOperation(\"通过主键查询$table_desc$详情\")\n    public HttpResult<$table_name_hump_A$> queryById(@PathVariable Integer id){\n        return $table_name_hump$Service.queryById(id);\n    }\n}\n",
                "generateCode": "\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * 收入信息HTTP请求控制器\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\n@RestController\n@RequestMapping(value = \"/revenueRecord/\")\npublic class RevenueRecordController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RevenueRecordController.class);\n\n    @Resource\n    private RevenueRecordService revenueRecordService;\n\n    /**\n     * 创建\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"create.json\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public Object create(@RequestBody JSONObject request){\n        return CommonTemplate.run(LOGGER, new CommonTemplate() {\n            @Override\n            protected Object business() {\n                return revenueRecordService.create(request);\n            }\n        }, request);\n    }\n\n    /**\n     * 修改\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"modify.json\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public Object modify(@RequestBody JSONObject request){\n        return CommonTemplate.run(LOGGER, new CommonTemplate() {\n            @Override\n            protected Object business() {\n                return revenueRecordService.modify(request);\n            }\n        }, request);\n    }\n\n    /**\n     * 分页查询\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"pageQuery.json\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public Object pageQuery(@RequestBody JSONObject request){\n        return CommonTemplate.run(LOGGER, new CommonTemplate() {\n            @Override\n            protected Object business() {\n                return revenueRecordService.pageQuery(request);\n            }\n        }, request);\n    }\n\n    /**\n     * 通过主键查询\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"queryById.json\", method = {RequestMethod.GET, RequestMethod.POST})\n    @ResponseBody\n    public Object queryById(@RequestBody JSONObject request){\n        return CommonTemplate.run(LOGGER, new CommonTemplate() {\n            @Override\n            protected Object business() {\n                return revenueRecordService.queryById(request);\n            }\n        }, request);\n    }\n}\n"
            }
        ]
    },
    {
        "classify": "commonLayer",
        "title": "通用层",
        "templates": [
            {
                "code": "common_result",
                "title": "统一请求返回结果类",
                "selectIon": false,
                "bodyCode": "\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.util.Date;\n\n/**\n * 通用返回\n * Created by 创建人 on $current_time$\n */\npublic class CommonResult<T> extends ToString {\n\n    /** 成功标识 */\n    protected Boolean success = true;\n\n    /** 错误码 */\n    protected String errorCode;\n\n    /** 错误描述 */\n    protected String errorMsg;\n\n    /** 返回数据 */\n    protected T data;\n\n    /** 服务器时间 */\n    protected Date serverTime;\n\n    public CommonResult(){}\n\n\n    public CommonResult(T data){\n        this.data = data;\n    }\n\n    public CommonResult(String errorCode, String errorMsg){\n        this.success = false;\n        this.errorCode = errorCode;\n        this.errorMsg = errorMsg;\n    }\n\n\n    public Boolean getSuccess() {\n        return success;\n    }\n\n    public void setSuccess(Boolean success) {\n        this.success = success;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public Date getServerTime() {\n        return this.serverTime == null ? new Date() : this.serverTime;\n    }\n\n    public void setServerTime(Date serverTime) {\n        this.serverTime = serverTime;\n    }\n\n    public static CommonResult convert(Object result){\n        return result instanceof CommonResult ? (CommonResult) result : new CommonResult(result);\n    }\n}\n",
                "generateCode": "\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.util.Date;\n\n/**\n * 通用返回\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic class CommonResult<T> extends ToString {\n\n    /** 成功标识 */\n    protected Boolean success = true;\n\n    /** 错误码 */\n    protected String errorCode;\n\n    /** 错误描述 */\n    protected String errorMsg;\n\n    /** 返回数据 */\n    protected T data;\n\n    /** 服务器时间 */\n    protected Date serverTime;\n\n    public CommonResult(){}\n\n\n    public CommonResult(T data){\n        this.data = data;\n    }\n\n    public CommonResult(String errorCode, String errorMsg){\n        this.success = false;\n        this.errorCode = errorCode;\n        this.errorMsg = errorMsg;\n    }\n\n\n    public Boolean getSuccess() {\n        return success;\n    }\n\n    public void setSuccess(Boolean success) {\n        this.success = success;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n    public Date getServerTime() {\n        return this.serverTime == null ? new Date() : this.serverTime;\n    }\n\n    public void setServerTime(Date serverTime) {\n        this.serverTime = serverTime;\n    }\n\n    public static CommonResult convert(Object result){\n        return result instanceof CommonResult ? (CommonResult) result : new CommonResult(result);\n    }\n}\n"
            },
            {
                "code": "template_class",
                "title": "模版方法模式",
                "selectIon": false,
                "bodyCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport jodd.bean.BeanException;\nimport org.slf4j.Logger;\nimport org.yaml.snakeyaml.constructor.DuplicateKeyException;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * 公共模板设计模式\n * Created by 创建人 on $current_time$\n */\npublic abstract class CommonTemplate {\n\n    /** 存储线程对应的traceId */\n    private static final ThreadLocal<String> THREAD_LOCAL = new ThreadLocal<>();\n\n\n    /**\n     * 逻辑方法\n     */\n    protected abstract Object business() throws Exception;\n\n\n    /**\n     * 执行\n     * @param request\n     * @param template\n     * @return\n     */\n    public static Object run(Logger logger, CommonTemplate template, Object... request) {\n        return handle(logger, template, request);\n    }\n\n\n    /**\n     * 逻辑执行方法\n     * @param request\n     * @param logger\n     * @param template\n     * @return\n     */\n    private static Object handle(Logger logger, CommonTemplate template, Object... request) {\n\n        setThreadTrace(request);\n\n        try {\n\n            LoggerUtils.info(logger, \"请求入参:{0}\", JSON.toJSONString(request));\n\n            // 执行逻辑代码\n            Object result = template.business();\n\n            // 设置结果TRACE\n            if (result instanceof JSONObject) {\n                ((JSONObject) result).put(\"traceId\", getTraceId());\n            } else if (result instanceof CommonResult) {\n                CommonResult r = (CommonResult) result;\n                if (StringUtils.isBlank(r.getTraceId())) {\n                    r.setTraceId(getTraceId());\n                }\n            }\n\n            // 打印结果\n            LoggerUtils.info(logger, \"返回结果:{0}\", result);\n\n            // 返回结果\n            return result;\n\n        } catch (Throwable e) {\n\n            // 打印错误日志\n            LoggerUtils.error(e, logger, \"执行异常，错误信息:{0}, 请求参数:{1}\", e.getMessage(), JSON.toJSONString(request));\n\n            // 获取执行异常时返回结果\n            CommonResult res = failHandle(e);\n            res.setTraceId(getTraceId());\n            return res;\n\n        } finally {\n\n            // 执行完毕后，删除线程对应的TraceId\n            THREAD_LOCAL.remove();\n        }\n    }\n\n\n    /**\n     * 失败的处理\n     * @param cause\n     * @return\n     */\n    private static CommonResult failHandle(Throwable cause) {\n        if (cause instanceof CommonException) {\n            CommonException ce = (CommonException) cause;\n            return new CommonResult(ce.getErrorCode(), ce.getErrorMsg());\n        } else if (cause instanceof DuplicateKeyException) {\n            return new CommonResult(\"IDEMPOTENT_ERROR\", \"已有相同数据，无需重复提交\");\n        } else if (cause instanceof BeansException) {\n            return new CommonResult(\"NO_SERVICE\", \"未匹配到对应服务\");\n        } else {\n            return new CommonResult(\"ERROR\", \"执行失败\");\n        }\n    }\n\n\n    /**\n     * 获取线程TRACE_ID\n     *\n     * @return\n     */\n    public static String getTraceId() {\n        return THREAD_LOCAL.get();\n    }\n\n    /**\n     * 设置线程TRACE_ID\n     */\n    private static void setThreadTrace(Object... request) {\n        String requestTraceId = null;\n        if (null != request) {\n            for (Object item : request) {\n                if (item instanceof JSONObject) {\n                    requestTraceId = ((JSONObject) item).getString(\"traceId\");\n                    break;\n                }\n            }\n        }\n\n        if (null == THREAD_LOCAL.get()){\n            THREAD_LOCAL.set(StringUtils.isNotBlank(requestTraceId) ? requestTraceId : UUID.randomUUID().toString().replace(\"-\", \"\"));\n        }\n    }\n}\n",
                "generateCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport jodd.bean.BeanException;\nimport org.slf4j.Logger;\nimport org.yaml.snakeyaml.constructor.DuplicateKeyException;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * 公共模板设计模式\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic abstract class CommonTemplate {\n\n    /** 存储线程对应的traceId */\n    private static final ThreadLocal<String> THREAD_LOCAL = new ThreadLocal<>();\n\n\n    /**\n     * 逻辑方法\n     */\n    protected abstract Object business() throws Exception;\n\n\n    /**\n     * 执行\n     * @param request\n     * @param template\n     * @return\n     */\n    public static Object run(Logger logger, CommonTemplate template, Object... request) {\n        return handle(logger, template, request);\n    }\n\n\n    /**\n     * 逻辑执行方法\n     * @param request\n     * @param logger\n     * @param template\n     * @return\n     */\n    private static Object handle(Logger logger, CommonTemplate template, Object... request) {\n\n        setThreadTrace(request);\n\n        try {\n\n            LoggerUtils.info(logger, \"请求入参:{0}\", JSON.toJSONString(request));\n\n            // 执行逻辑代码\n            Object result = template.business();\n\n            // 设置结果TRACE\n            if (result instanceof JSONObject) {\n                ((JSONObject) result).put(\"traceId\", getTraceId());\n            } else if (result instanceof CommonResult) {\n                CommonResult r = (CommonResult) result;\n                if (StringUtils.isBlank(r.getTraceId())) {\n                    r.setTraceId(getTraceId());\n                }\n            }\n\n            // 打印结果\n            LoggerUtils.info(logger, \"返回结果:{0}\", result);\n\n            // 返回结果\n            return result;\n\n        } catch (Throwable e) {\n\n            // 打印错误日志\n            LoggerUtils.error(e, logger, \"执行异常，错误信息:{0}, 请求参数:{1}\", e.getMessage(), JSON.toJSONString(request));\n\n            // 获取执行异常时返回结果\n            CommonResult res = failHandle(e);\n            res.setTraceId(getTraceId());\n            return res;\n\n        } finally {\n\n            // 执行完毕后，删除线程对应的TraceId\n            THREAD_LOCAL.remove();\n        }\n    }\n\n\n    /**\n     * 失败的处理\n     * @param cause\n     * @return\n     */\n    private static CommonResult failHandle(Throwable cause) {\n        if (cause instanceof CommonException) {\n            CommonException ce = (CommonException) cause;\n            return new CommonResult(ce.getErrorCode(), ce.getErrorMsg());\n        } else if (cause instanceof DuplicateKeyException) {\n            return new CommonResult(\"IDEMPOTENT_ERROR\", \"已有相同数据，无需重复提交\");\n        } else if (cause instanceof BeansException) {\n            return new CommonResult(\"NO_SERVICE\", \"未匹配到对应服务\");\n        } else {\n            return new CommonResult(\"ERROR\", \"执行失败\");\n        }\n    }\n\n\n    /**\n     * 获取线程TRACE_ID\n     *\n     * @return\n     */\n    public static String getTraceId() {\n        return THREAD_LOCAL.get();\n    }\n\n    /**\n     * 设置线程TRACE_ID\n     */\n    private static void setThreadTrace(Object... request) {\n        String requestTraceId = null;\n        if (null != request) {\n            for (Object item : request) {\n                if (item instanceof JSONObject) {\n                    requestTraceId = ((JSONObject) item).getString(\"traceId\");\n                    break;\n                }\n            }\n        }\n\n        if (null == THREAD_LOCAL.get()){\n            THREAD_LOCAL.set(StringUtils.isNotBlank(requestTraceId) ? requestTraceId : UUID.randomUUID().toString().replace(\"-\", \"\"));\n        }\n    }\n}\n"
            },
            {
                "code": "common_assert",
                "title": "断言工具类",
                "selectIon": false,
                "bodyCode": "\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.Collection;\n\n/**\n * 公用的断言工具\n * Created by 创建人 on $current_time$\n */\npublic class CommonAssert {\n\n    /**\n     * 断言为true\n     * @param b\n     * @param msg\n     */\n    public static void isTrue(boolean b, String msg) {\n        if (!b) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为空字符串\n     * @param str\n     * @param msg\n     */\n    public static void isBlankStr(String str, String msg) {\n        if (str == null || str.trim().length() > 0){\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空字符串\n     * @param str\n     * @param msg\n     */\n    public static void isNoBlankStr(String str, String msg) {\n        if (str == null || str.trim().length() == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空Collection\n     * @param collection\n     * @param msg\n     */\n    public static void isNoEmptyCollection(@Nullable Collection<?> collection, String msg) {\n        if (CollectionUtils.isEmpty(collection)) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为空Collection\n     * @param collection\n     * @param msg\n     */\n    public static void isEmptyCollection(@Nullable Collection<?> collection, String msg) {\n        if (!CollectionUtils.isEmpty(collection)) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Integer num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Long num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Double num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空对象\n     * @param o\n     * @param msg\n     */\n    public static void isNoEmptyObj(Object o, String msg) {\n        if (o == null) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为成功\n     * @param o\n     * @param msg\n     */\n    public static void isCommonResult(CommonResult o, String msg) {\n        if (o == null || !o.getSuccess()) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言是否注册\n     * @param b\n     */\n    public static void isNoRegister(boolean b) {\n        if (!b) {\n            throw new CommonException(\"NO_LOGIN\");\n        }\n    }\n}\n\n",
                "generateCode": "\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.Collection;\n\n/**\n * 公用的断言工具\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic class CommonAssert {\n\n    /**\n     * 断言为true\n     * @param b\n     * @param msg\n     */\n    public static void isTrue(boolean b, String msg) {\n        if (!b) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为空字符串\n     * @param str\n     * @param msg\n     */\n    public static void isBlankStr(String str, String msg) {\n        if (str == null || str.trim().length() > 0){\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空字符串\n     * @param str\n     * @param msg\n     */\n    public static void isNoBlankStr(String str, String msg) {\n        if (str == null || str.trim().length() == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空Collection\n     * @param collection\n     * @param msg\n     */\n    public static void isNoEmptyCollection(@Nullable Collection<?> collection, String msg) {\n        if (CollectionUtils.isEmpty(collection)) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为空Collection\n     * @param collection\n     * @param msg\n     */\n    public static void isEmptyCollection(@Nullable Collection<?> collection, String msg) {\n        if (!CollectionUtils.isEmpty(collection)) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Integer num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Long num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n    /**\n     * 断言为非空且大于0的数字\n     * @param num\n     * @param msg\n     */\n    public static void greaterThanZero(Double num, String msg) {\n        if (num == null || num == 0) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为非空对象\n     * @param o\n     * @param msg\n     */\n    public static void isNoEmptyObj(Object o, String msg) {\n        if (o == null) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言为成功\n     * @param o\n     * @param msg\n     */\n    public static void isCommonResult(CommonResult o, String msg) {\n        if (o == null || !o.getSuccess()) {\n            throw new CommonException(msg);\n        }\n    }\n\n\n    /**\n     * 断言是否注册\n     * @param b\n     */\n    public static void isNoRegister(boolean b) {\n        if (!b) {\n            throw new CommonException(\"NO_LOGIN\");\n        }\n    }\n}\n\n"
            },
            {
                "code": "string_urils",
                "title": "字符串工具类",
                "selectIon": false,
                "bodyCode": "\n/**\n * 字符串工具类\n * Created by 创建人 on $current_time$\n */\npublic class StringUtils {\n\n    /**\n     * 不为空判断，不等于 null or \"\" 时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isNotEmpty(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 不为空格判断，不等于 null or \"\" or \" \" 时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isNotBlank(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        str = str.trim();\n        return str.length() != 0;\n    }\n\n    /**\n     * 空格判断，仅有空格时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isBlank(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        str = str.trim();\n        return str.length() == 0;\n    }\n\n    /**\n     * 判断两个字符串是否一致\n     * @return\n     */\n    public static boolean equals(String a, String b) {\n        if (a == null || b == null) {\n            return false;\n        }\n\n        return a.equals(b);\n    }\n\n    /**\n     * params是否包含value\n     * @param value\n     * @param params\n     * @return\n     */\n    public static boolean contains(String value, String... params){\n        if (null == value || null == params || params.length == 0){\n            return false;\n        }\n\n        for (String item : params){\n            if (equals(item, value)){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * 字符连接\n     * @param param 等于null会返回空字符串\n     * @return\n     */\n    public static String compose(String... param){\n\n        if (param == null || param.length == 0) {\n            return \"\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (String item : param) {\n            if (isNotEmpty(item)) {\n                sb.append(item);\n            }\n        }\n\n        return sb.toString();\n    }\n}\n",
                "generateCode": "\n/**\n * 字符串工具类\n * Created by 创建人 on 2023-02-14 11:40:57\n */\npublic class StringUtils {\n\n    /**\n     * 不为空判断，不等于 null or \"\" 时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isNotEmpty(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 不为空格判断，不等于 null or \"\" or \" \" 时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isNotBlank(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        str = str.trim();\n        return str.length() != 0;\n    }\n\n    /**\n     * 空格判断，仅有空格时返回true\n     * @param str\n     * @return\n     */\n    public static boolean isBlank(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        str = str.trim();\n        return str.length() == 0;\n    }\n\n    /**\n     * 判断两个字符串是否一致\n     * @return\n     */\n    public static boolean equals(String a, String b) {\n        if (a == null || b == null) {\n            return false;\n        }\n\n        return a.equals(b);\n    }\n\n    /**\n     * params是否包含value\n     * @param value\n     * @param params\n     * @return\n     */\n    public static boolean contains(String value, String... params){\n        if (null == value || null == params || params.length == 0){\n            return false;\n        }\n\n        for (String item : params){\n            if (equals(item, value)){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * 字符连接\n     * @param param 等于null会返回空字符串\n     * @return\n     */\n    public static String compose(String... param){\n\n        if (param == null || param.length == 0) {\n            return \"\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (String item : param) {\n            if (isNotEmpty(item)) {\n                sb.append(item);\n            }\n        }\n\n        return sb.toString();\n    }\n}\n"
            },
            {
                "title": "通用的异常类",
                "code": "common_exception",
                "selectIon": false,
                "bodyCode": "\n/**\n * 公用的自定义异常\n * Created by 创建人 on $current_time$.\n */\npublic class CommonException extends RuntimeException {\n\n    /** 错误描述 */\n    private String errorMsg;\n    /** 错误编码 */\n    private String errorCode;\n\n    public CommonException(String errorMsg) {\n        super(errorMsg);\n        this.errorMsg = errorMsg;\n    }\n\n    public CommonException(String errorMsg, String code) {\n        super(errorMsg);\n        this.errorMsg = errorMsg;\n        this.errorCode = code;\n    }\n\n    public CommonException(String msg, Throwable cause) {\n        super(msg, cause);\n        this.errorMsg = msg;\n    }\n\n    public CommonException(String msg, String code, Throwable cause) {\n        super(msg, cause);\n        this.errorMsg = msg;\n        this.errorCode = code;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n}\n",
                "generateCode": "\n/**\n * 公用的自定义异常\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class CommonException extends RuntimeException {\n\n    /** 错误描述 */\n    private String errorMsg;\n    /** 错误编码 */\n    private String errorCode;\n\n    public CommonException(String errorMsg) {\n        super(errorMsg);\n        this.errorMsg = errorMsg;\n    }\n\n    public CommonException(String errorMsg, String code) {\n        super(errorMsg);\n        this.errorMsg = errorMsg;\n        this.errorCode = code;\n    }\n\n    public CommonException(String msg, Throwable cause) {\n        super(msg, cause);\n        this.errorMsg = msg;\n    }\n\n    public CommonException(String msg, String code, Throwable cause) {\n        super(msg, cause);\n        this.errorMsg = msg;\n        this.errorCode = code;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(String errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n}\n"
            },
            {
                "code": "common_pagination",
                "title": "分页模型",
                "bodyCode": "\n/**\n * 分页模型\n * Created by 创建人 on $current_time$.\n */\npublic class Pagination extends ToString {\n\n    /** 页码 */\n    private Integer pageIndex;\n\n    /** 分页大小 */\n    private Integer pageSize;\n\n    /** 数据总数 */\n    private Long total;\n\n    public Integer getPageIndex() {\n        return pageIndex;\n    }\n\n    public void setPageIndex(Integer pageIndex) {\n        this.pageIndex = pageIndex;\n    }\n\n    public Integer getPageSize() {\n        return pageSize;\n    }\n\n    public void setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n    }\n\n    public Long getTotal() {\n        return total;\n    }\n\n    public void setTotal(Long total) {\n        this.total = total;\n    }\n\n}\n",
                "selectIon": false,
                "generateCode": "\n/**\n * 分页模型\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class Pagination extends ToString {\n\n    /** 页码 */\n    private Integer pageIndex;\n\n    /** 分页大小 */\n    private Integer pageSize;\n\n    /** 数据总数 */\n    private Long total;\n\n    public Integer getPageIndex() {\n        return pageIndex;\n    }\n\n    public void setPageIndex(Integer pageIndex) {\n        this.pageIndex = pageIndex;\n    }\n\n    public Integer getPageSize() {\n        return pageSize;\n    }\n\n    public void setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n    }\n\n    public Long getTotal() {\n        return total;\n    }\n\n    public void setTotal(Long total) {\n        this.total = total;\n    }\n\n}\n"
            },
            {
                "code": "common_pagination_db",
                "title": "分页模型-DB",
                "bodyCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.Serializable;\n\n/**\n * 分页DB模型\n * Created by 创建人 on $current_time$.\n */\npublic class PaginationDO extends Pagination implements Serializable{\n\n    /** 分页起始点 */\n    private Integer offset;\n\n    /** 分页大小 */\n    private Integer rows;\n\n    /**\n     * 重写 setPageIndex() ，在实例设置了 pageIndex和pageSize后，自动设置offset和rows\n     * @param pageIndex\n     */\n    @Override\n    public void setPageIndex(Integer pageIndex) {\n        super.setPageIndex(pageIndex);\n        if (this.getPageSize() != null){\n            this.rows = this.getPageSize();\n            this.offset = getLimitOffset(this.getPageIndex(), this.getPageSize());\n        }\n    }\n\n    /**\n     * 重写 setPageSize() ，在实例设置了 pageIndex和pageSize后，自动设置offset和rows\n     * @param pageSize\n     */\n    @Override\n    public void setPageSize(Integer pageSize) {\n        super.setPageSize(pageSize);\n        if (this.getPageIndex() != null){\n            this.rows = pageSize;\n            this.offset = getLimitOffset(this.getPageIndex(), this.getPageSize());\n        }\n    }\n\n    public Integer getOffset() {\n        return offset;\n    }\n\n    public void setOffset(Integer offset) {\n        this.offset = offset;\n    }\n\n    public Integer getRows() {\n        return rows;\n    }\n\n    public void setRows(Integer rows) {\n        this.rows = rows;\n    }\n\n\n    /**\n     * 向 request 填充 offset 与 rows 后返回 PaginationDO\n     * @param request\n     * @return\n     */\n    public static PaginationDO setRequestOffsetAndRows(JSONObject request){\n        if (null == request){\n            return null;\n        }\n\n        Integer pageIndex = request.getInteger(\"pageIndex\");\n        Integer pageSize = request.getInteger(\"pageSize\");\n        if (null == pageIndex || null == pageSize){\n            return null;\n        }\n\n        // 解析成PaginationDO\n        PaginationDO paginationDO = JSON.toJavaObject(request, PaginationDO.class);\n\n        // 向 request 填充 offset 与 rows\n        request.put(\"offset\", paginationDO.getOffset());\n        request.put(\"rows\", paginationDO.getRows());\n        return paginationDO;\n    }\n\n\n    /**\n     * 计算分页起始索引\n     * @param page 指定分页\n     * @param pageSize 分页大小\n     * @return\n     */\n    public static int getLimitOffset(int page, int pageSize){\n        // 兼容等于0的情况\n        page = page <= 0 ? 1 : page;\n        return (page - 1) * pageSize;\n    }\n}\n",
                "selectIon": false,
                "generateCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.Serializable;\n\n/**\n * 分页DB模型\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class PaginationDO extends Pagination implements Serializable{\n\n    /** 分页起始点 */\n    private Integer offset;\n\n    /** 分页大小 */\n    private Integer rows;\n\n    /**\n     * 重写 setPageIndex() ，在实例设置了 pageIndex和pageSize后，自动设置offset和rows\n     * @param pageIndex\n     */\n    @Override\n    public void setPageIndex(Integer pageIndex) {\n        super.setPageIndex(pageIndex);\n        if (this.getPageSize() != null){\n            this.rows = this.getPageSize();\n            this.offset = getLimitOffset(this.getPageIndex(), this.getPageSize());\n        }\n    }\n\n    /**\n     * 重写 setPageSize() ，在实例设置了 pageIndex和pageSize后，自动设置offset和rows\n     * @param pageSize\n     */\n    @Override\n    public void setPageSize(Integer pageSize) {\n        super.setPageSize(pageSize);\n        if (this.getPageIndex() != null){\n            this.rows = pageSize;\n            this.offset = getLimitOffset(this.getPageIndex(), this.getPageSize());\n        }\n    }\n\n    public Integer getOffset() {\n        return offset;\n    }\n\n    public void setOffset(Integer offset) {\n        this.offset = offset;\n    }\n\n    public Integer getRows() {\n        return rows;\n    }\n\n    public void setRows(Integer rows) {\n        this.rows = rows;\n    }\n\n\n    /**\n     * 向 request 填充 offset 与 rows 后返回 PaginationDO\n     * @param request\n     * @return\n     */\n    public static PaginationDO setRequestOffsetAndRows(JSONObject request){\n        if (null == request){\n            return null;\n        }\n\n        Integer pageIndex = request.getInteger(\"pageIndex\");\n        Integer pageSize = request.getInteger(\"pageSize\");\n        if (null == pageIndex || null == pageSize){\n            return null;\n        }\n\n        // 解析成PaginationDO\n        PaginationDO paginationDO = JSON.toJavaObject(request, PaginationDO.class);\n\n        // 向 request 填充 offset 与 rows\n        request.put(\"offset\", paginationDO.getOffset());\n        request.put(\"rows\", paginationDO.getRows());\n        return paginationDO;\n    }\n\n\n    /**\n     * 计算分页起始索引\n     * @param page 指定分页\n     * @param pageSize 分页大小\n     * @return\n     */\n    public static int getLimitOffset(int page, int pageSize){\n        // 兼容等于0的情况\n        page = page <= 0 ? 1 : page;\n        return (page - 1) * pageSize;\n    }\n}\n"
            },
            {
                "title": "分页返回结果模型",
                "code": "common_pagination_result",
                "selectIon": false,
                "bodyCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\n\n/**\n * 分页返回模型\n * Created by weiqingming on 2021/5/16.\n */\npublic class PaginationResult extends ToString {\n\n    public PaginationResult(Object data, Pagination pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n\n    public PaginationResult(Object data, Pagination pagination, long total){\n        this.data = data;\n        this.pagination = pagination;\n        this.pagination.setTotal(total);\n    }\n\n    public PaginationResult(Object data, JSONObject request, long total){\n        this.data = data;\n        this.pagination = JSON.toJavaObject(request, Pagination.class);\n        if (null != this.pagination){\n            this.pagination.setTotal(total);\n        }\n    }\n\n\n    /** 数据 */\n    private Object data;\n\n    /** 分页对象 */\n    private Pagination pagination;\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n\n    public Pagination getPagination() {\n        return pagination;\n    }\n\n    public void setPagination(Pagination pagination) {\n        this.pagination = pagination;\n    }\n}\n",
                "generateCode": "\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\n\n/**\n * 分页返回模型\n * Created by weiqingming on 2021/5/16.\n */\npublic class PaginationResult extends ToString {\n\n    public PaginationResult(Object data, Pagination pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n\n    public PaginationResult(Object data, Pagination pagination, long total){\n        this.data = data;\n        this.pagination = pagination;\n        this.pagination.setTotal(total);\n    }\n\n    public PaginationResult(Object data, JSONObject request, long total){\n        this.data = data;\n        this.pagination = JSON.toJavaObject(request, Pagination.class);\n        if (null != this.pagination){\n            this.pagination.setTotal(total);\n        }\n    }\n\n\n    /** 数据 */\n    private Object data;\n\n    /** 分页对象 */\n    private Pagination pagination;\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n\n    public Pagination getPagination() {\n        return pagination;\n    }\n\n    public void setPagination(Pagination pagination) {\n        this.pagination = pagination;\n    }\n}\n"
            },
            {
                "title": "日志工具类",
                "code": "common_logger_utils",
                "selectIon": false,
                "bodyCode": "\nimport org.slf4j.Logger;\n\n/**\n * 日志工具\n * Created by 创建人 on $current_time$.\n */\npublic class LoggerUtils {\n\n    public static void info(Logger logger, String message){\n        logger.info(message  + trace());\n    }\n\n    public static void info(Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.info(message);\n    }\n\n\n    public static void warn(Logger logger, String message){\n        logger.warn(message  + trace());\n    }\n\n    public static void warn(Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.warn(message);\n    }\n\n    public static void error(Throwable e,Logger logger, String message){\n        logger.error(message + trace() , e);\n    }\n\n    public static void error(Throwable e,Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.error(message, e);\n    }\n\n    private static String setMessage(String message, Object... param){\n\n        if (null == param){\n            return message;\n        }\n\n        for (int i = 0; i < param.length; i++) {\n            String replace = \"{\" + i + \"}\";\n            if (!message.contains(replace)){\n                continue;\n            }\n            String replaceN = \"\" + param[i];\n            message = message.replace(replace, replaceN);\n        }\n\n        return message + trace();\n    }\n\n    private static String trace(){\n        return \"-traceId:\" + CommonTemplate.getTraceId();\n    }\n}",
                "generateCode": "\nimport org.slf4j.Logger;\n\n/**\n * 日志工具\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class LoggerUtils {\n\n    public static void info(Logger logger, String message){\n        logger.info(message  + trace());\n    }\n\n    public static void info(Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.info(message);\n    }\n\n\n    public static void warn(Logger logger, String message){\n        logger.warn(message  + trace());\n    }\n\n    public static void warn(Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.warn(message);\n    }\n\n    public static void error(Throwable e,Logger logger, String message){\n        logger.error(message + trace() , e);\n    }\n\n    public static void error(Throwable e,Logger logger, String message, Object... param){\n        message = setMessage(message, param);\n        logger.error(message, e);\n    }\n\n    private static String setMessage(String message, Object... param){\n\n        if (null == param){\n            return message;\n        }\n\n        for (int i = 0; i < param.length; i++) {\n            String replace = \"{\" + i + \"}\";\n            if (!message.contains(replace)){\n                continue;\n            }\n            String replaceN = \"\" + param[i];\n            message = message.replace(replace, replaceN);\n        }\n\n        return message + trace();\n    }\n\n    private static String trace(){\n        return \"-traceId:\" + CommonTemplate.getTraceId();\n    }\n}"
            },
            {
                "code": "common_tostring",
                "title": "基础模型类",
                "selectIon": false,
                "bodyCode": "\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.Serializable;\n\n/**\n * 基础模型类\n * Created by 创建人 on $current_time$.\n */\npublic class ToString implements Serializable{\n\n    /** 跟踪ID */\n    protected String traceId;\n\n    public String getTraceId() {\n        return traceId;\n    }\n\n    public void setTraceId(String traceId) {\n        this.traceId = traceId;\n    }\n\n    public String toString(){\n        return JSONObject.toJSONString(this);\n    }\n\n}\n",
                "generateCode": "\nimport com.alibaba.fastjson.JSONObject;\n\nimport java.io.Serializable;\n\n/**\n * 基础模型类\n * Created by 创建人 on 2023-02-14 11:40:57.\n */\npublic class ToString implements Serializable{\n\n    /** 跟踪ID */\n    protected String traceId;\n\n    public String getTraceId() {\n        return traceId;\n    }\n\n    public void setTraceId(String traceId) {\n        this.traceId = traceId;\n    }\n\n    public String toString(){\n        return JSONObject.toJSONString(this);\n    }\n\n}\n"
            }
        ]
    }
]